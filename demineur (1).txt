import tuiles

#pour chaque pixel dans chque ligne on change le pixel
def afficherImage (x,y, colormap, image):
    for i in range(0,len(image)):    
        for j in range(0,len(image[i])):
            setPixel(x+j,y+i,colormap[image[i][j]])

#puique les tuiles sont 16x16, la coordonné de pixel
#corespond a 16x la coordonne de tuile
def afficherTuile (x,y, tuile):
    afficherImage(x*16,y*16, tuiles.colormap,tuiles.images[tuile])

#attendre que l'utilisateur clic a un endroit
#je crois qu'il manque qqch pour attendre que le clic soit "arreter"
def attendreClic():
    
    
    while True:
        if getMouseButton() == 0:
            sleep(0.01)
            clic = getMouseButton()
            X=getMouseX()
            Y=getMouseY()
            CTRL = getMouseCtrl()
            
            #on divise entièrement le x et le y car les images des tuiles
            #sont 16x16. Comme dans afficherTuiles()
            if clic == 1 and CTRL ==False :
                return struct(X=X//16,Y=Y//16,drapeau = False)       
            elif clic == 2 or clic == 1 and CTRL==True:
                return struct(X=X//16,Y=Y//16,drapeau = True)
        

#retourne un tableau 2D de bool false
def grilleDeBooleens(largeur, hauteur):
    matrice= [None] * hauteur
    for i in range(hauteur):
        matrice[i] = [False] * largeur
    return matrice

#retourne un valeur au hasard en zero en max
def valeurAuHasard(max):
    return math.floor(random() * max)


#on place les nbMines dans un tableau de bool qu'on retourne
def placerMines(largeur, hauteur, nbMines, x, y): 
    mines = grilleDeBooleens(largeur, hauteur)#on créer notre grille
    
    #on pose nbMines position dans la grille a true
    for i in range(nbMines):
        minePlacer = False # la mine n'est pas encore placer
        
        #tant qu'on ne trouve pas une bonne place pour
        #la mine on lui trouve une nouvelle place
        while not minePlacer:
            ligne= valeurAuHasard(hauteur)
            colonne = valeurAuHasard(largeur)
            
            #on s'assure de ne pas placer deux mines a la meme place
            #et de ne pas placer de mine a la coordonnee (x,y)
            if  ligne == y and colonne ==x or mines[ligne][colonne]==True:
                continue
            else:
                mines[ligne][colonne]=True
                minePlacer = True #la mine a bien ete placer
            
    return mines  

#regarde chaque case adjacente a la coordonee (x,y)
#s'il y a une mine on ajoute 1 au cpt(compteur)
#surement facons d'ameliorer le code...mais je ne vois pas 
def nbMinesVoisines(x,y,mines):
    largeur=len(mines[0])-1#x
    hauteur=len(mines)-1#y
    cpt=0
    if x == largeur and y == hauteur:#coin en bas a droite
        if mines[x-1][y]:
            cpt+=1
        if mines[x-1][y-1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
    elif x == largeur and y == 0:#coin en haut a droite
        if mines[x-1][y+1]:
            cpt+=1
        if mines[x][y+1]:
            cpt+=1
        if mines[x-1][y]:
            cpt+=1    
    elif x == largeur:#pas un coin a doite
        if mines[x-1][y-1]:
            cpt+=1
        if mines[x-1][y+1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
        if mines[x][y+1]:
            cpt+=1
        if mines[x-1][y]:
            cpt+=1 
    elif x == 0 and y== hauteur:#coin en bas a gauche
        if mines[x+1][y]:
            cpt+=1
        if mines[x+1][y-1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
    elif x == 0 and y == 0: #coin en haut a gauche
        if mines[x][y+1]:
            cpt+=1
        if mines[x+1][y+1]:
            cpt+=1
        if mines[x+1][y]:
            cpt+=1
    elif x == 0:#pas un coin a gauche
        if mines[x+1][y]:
            cpt+=1
        if mines[x+1][y-1]:
            cpt+=1
        if mines[x+1][y+1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
        if mines[x][y+1]:
            cpt+=1
    elif y == 0:#en haut (on  a deja fait les coins)
        if mines[x-1][y+1]:
            cpt+=1
        if mines[x][y+1]:
            cpt+=1
        if mines[x+1][y+1]:
            cpt+=1
        if mines[x-1][y]:
            cpt+=1
        if mines[x+1][y]:
            cpt+=1
    elif y == hauteur:#en bas (on  a deja fait les coins)
        if mines[x-1][y-1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
        if mines[x+1][y-1]:
            cpt+=1
        if mines[x-1][y]:
            cpt+=1
        if mines[x+1][y]:
            cpt+=1
    else:# pas sur les cotes
        if mines[x-1][y+1]:
            cpt+=1
        if mines[x][y+1]:
            cpt+=1
        if mines[x+1][y+1]:
            cpt+=1
        if mines[x-1][y-1]:
            cpt+=1
        if mines[x][y-1]:
            cpt+=1
        if mines[x+1][y-1]:
            cpt+=1
        if mines[x+1][y]:
            cpt+=1
        if mines[x-1][y]:
            cpt+=1
    return cpt

#affiche les mines et les mauvais drapeaux
def afficherMines(mines,drapeaux):
    for i in range(len(mines)):
        for j in range(len(mines[i])):
            if drapeaux[i][j] and not mines[i][j]:
                afficherTuile(i,j,11)
            elif mines[i][j]:
                afficherTuile(i,j,9)

def demineur(largeur, hauteur, nbMines):
    setScreenMode(hauteur*16,largeur*16)
    
    gameOver = False
    drapeaux = grilleDeBooleens(largeur, hauteur)
    
    #affiche les tuiles vides
    for i in range(hauteur):
        for j in range(largeur):
            afficherTuile(i, j, 12)
            
    #on place les mines apres le premier clic pour etre sur de ne pas clic 
    #sur une bombe au premier clic
    premierClic = attendreClic()
    mines = placerMines(largeur, hauteur, nbMines, premierClic.X,premierClic.Y)
    afficherTuile(premierClic.X,premierClic.Y,
                  nbMinesVoisines(premierClic.X, premierClic.Y, mines))
    
    while not gameOver:
        clic = attendreClic()
        x = clic.X
        y = clic.Y
        clicDrapeau = clic.drapeau
        
        if not clicDrapeau:
            if not drapeaux[x][y]:#s'il y a un drapeau on fait rien
                if mines[x][y]: #si click sur mine
                    afficherMines(mines,drapeaux)
                    afficherTuile(x,y,10)#affiche la mine ou on clic en rouge
                    print("gameOver")
                    gameOver = True #on arrete le jeu
                    
                else: #affichage selon nb de mines voisines
                    afficherTuile(x,y,nbMinesVoisines(x, y, mines))
                    #if nbMinesVoisines(x, y, mines) == 0:
                        #for i in range(x-1, x+1):
                            #for j in range(y-1, y+1):
                                #if(nbMinesVoisines(i, j, mines)):
                                    #afficherTuile(i,j,0)
        
        #si on veux mettre ou enlever un drapeau
        else: 
            drapeaux[x][y] = not drapeaux[x][y]#on change le booleen
            
            #on affiche la case qui corespond a se qu'on veut
            if(drapeaux[x][y]):
                afficherTuile(x,y,13)#mettre un drapeau
            else:
                afficherTuile(x,y,12)#enlever un drapeau
                
        #si on a mit un drapeau sur toutes les bombes
        #et seulement sur les bombes on gagne la partie et on l'arrete
        if mines == drapeaux:
            print('gagner!!')
            gameOver=True
                
def testDemineur():
    setScreenMode(16,16)
    
    afficherTuile(0,0,12)
    assert exportScreen() == '#'\
    'fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#ccc\n'\
    '#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#ccc#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#ccc#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#ccc#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888'
   
    
testDemineur()   