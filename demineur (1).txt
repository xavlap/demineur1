import tuiles

setScreenMode(128,128)

#pour chaque pixel dans chque ligne on change le pixel
def afficherImage (x,y, colormap, image):
    for i in range(0,len(image)):    
        for j in range(0,len(image[i])):
            setPixel(x+j,y+i,colormap[image[i][j]])

#puique les tuiles sont 16x16, la coordonné de pixel
#corespond a 16x la coordonne de tuile
def afficherTuile (x,y, tuile):
    afficherImage(x*16,y*16, tuiles.colormap,tuiles.images[tuile])

#attendre que l'utilisateur clic a un endroit
#je crois qu'il manque qqch pour attendre que le clic soit "arreter"
def attendreClic():
    
    
    while True:
        if getMouseButton() == 0:
            sleep(0.01)
            clic = getMouseButton()
            X=getMouseX()
            Y=getMouseY()
            CTRL = getMouseCtrl()
            
            #on divise entièrement le x et le y car les images des tuiles
            #sont 16x16. Comme dans afficherTuiles()
            if clic == 1 and CTRL ==False :
                return struct(X=X//16,Y=Y//16,drapeau = False)       
            elif clic == 2 or clic == 1 and CTRL==true:
                return struct(X=X//16,Y=Y//16,drapeau = True)
        

#retourne un tableau 2D de bool false
def grilleDeBooleens(largeur, hauteur):
    matrice= [None] * hauteur
    for i in range(hauteur):
        matrice[i] = [False] * largeur
    return matrice

#retourne un valeur au hasard en zero en max
def valeurAuHasard(max):
    return math.floor(random() * max)


#on place les nbMines dans un tableau de bool qu'on retourne
def placerMines(largeur, hauteur, nbMines, x, y): 
    mines = grilleDeBooleens(largeur, hauteur)#on créer notre grille
    
    #on pose nbMines position dans la grille a true
    for i in range(nbMines):
        minePlacer = False # la mine n'est pas encore placer
        
        #tant qu'on ne trouve pas une bonne place pour
        #la mine on lui trouve une nouvelle place
        while not minePlacer:
            ligne= valeurAuHasard(hauteur)
            colonne = valeurAuHasard(largeur)
            
            #on s'assure de ne pas placer deux mines a la meme place
            #et de ne pas placer de mine a la coordonnee (x,y)
            if  ligne == y and colonne ==x or mines[ligne][colonne]==True:
                continue
            else:
                mines[ligne][colonne]=True
                minePlacer = True #la mine a bien ete placer
            
    return mines  

#regarde chaque case adjacente a la coordonee (x,y)
#s'il y a une mine on ajoute 1 au cpt
#surement facons d'ameliorer le code...mais je ne vois pas 
#Erreur a fixe; les cotes comme en bas sont out of bounds
#pour fixe: verifier si c'est out bounds avant de regarder pour une mine
def nbMinesVoisines(x,y,mines):
    largeur=len(mines[0])-1#x
    hauteur=len(mines)-1#y
    cpt=0
    if x == largeur:#si on est en droite
        if mines[x-1][y]:
            cpt+=1
        if y == hauteur: #coin en bas a droite
            if mines[x-1][y-1]:
                cpt+=1
            if mines[x][y-1]:
                cpt+=1
        elif y == 0:#coin en haut a droite
            if mines[x-1][y+1]:
                cpt+=1
            if mines[x][y+1]:
                cpt+=1
        else:#pas un coin a doite
            if mines[x-1][y-1]:
                cpt+=1
            if mines[x-1][y+1]:
                cpt+=1
            if mines[x][y-1]:
                cpt+=1
            if mines[x][y+1]:
                cpt+=1
    elif x == 0:#si on est a gauche
        if mines[x+1][y]:
            cpt+=1
        if y == hauteur:#coin en bas a gauche
            if mines[x+1][y-1]:
                cpt+=1
            if mines[x][y-1]:
                cpt+=1
        elif y == 0: #coin en haut a gauche
            if mines[x][y+1]:
                cpt+=1
            if mines[x+1][y+1]:
                cpt+=1
        else:#pas un coin a gauche
            if mines[x+1][y-1]:
                cpt+=1
            if mines[x+1][y+1]:
                cpt+=1
            if mines[x][y-1]:
                cpt+=1
            if mines[x][y+1]:
                cpt+=1
    elif y == 0:#en haut (on  a deja fait les coin)
        if mines[y+1][x-1]:
            cpt+=1
        if mines[y+1][x]:
            cpt+=1
        if mines[y+1][x+1]:
            cpt+=1
    elif y == 0:#en bas (on  a deja fait les coin)
        if mines[y-1][x-1]:
            cpt+=1
        if mines[y-1][x]:
            cpt+=1
        if mines[y-1][x+1]:
            cpt+=1
    else:# pas sur les cotes
        if mines[y+1][x-1]:
            cpt+=1
        if mines[y+1][x]:
            cpt+=1
        if mines[y+1][x+1]:
            cpt+=1
        if mines[y-1][x-1]:
            cpt+=1
        if mines[y-1][x]:
            cpt+=1
        if mines[y-1][x+1]:
            cpt+=1
        if mines[y][x+1]:
            cpt+=1
        if mines[y][x-1]:
            cpt+=1
    return cpt

#affiche les mines trouve
def afficherMines(mines):
    for i in range(len(mines)):
        for j in range(len(mines[i])):
            if mines[i][j]:
                afficherTuile(i,j,9)

def demineur(largeur, hauteur, nbMines):
    gameOver = False
    drapeaux = grilleDeBooleens(largeur, hauteur)
    for i in range(hauteur):
        for j in range(largeur):
            afficherTuile(i, j, 12)
            
    premierClic = attendreClic()
    mines = placerMines(largeur, hauteur, nbMines, premierClic.X,premierClic.Y)
    afficherTuile(premierClic.X,premierClic.Y,
                  nbMinesVoisines(premierClic.X, premierClic.Y, mines))
    
    while not gameOver:
        clic = attendreClic()
        x = clic.X
        y = clic.Y
        print(x)
        print(y)
        clicDrapeau = clic.drapeau
        if not clicDrapeau:
            if mines[x][y]:
                afficherMines(mines)
                afficherTuile(x,y,10)
                print("gameOver") #si click sur mine
                gameOver = True
            else: #affichage mine voisine
                afficherTuile(x,y,nbMinesVoisines(x, y, mines))
                #if nbMinesVoisines(x, y, mines) == 0:
                    #for i in range(x-1, x+1):
                        #for j in range(y-1, y+1):
                            #if(nbMinesVoisines(i, j, mines)):
                                #afficherTuile(i,j,0)
                    
        #ca double clic pcq on attend pas que le clic sois lacher dans 
        #la fonction attendre clic (c'est regle)     
        else: 
            drapeaux[x][y] = not drapeaux[x][y]
           
            if(drapeaux[x][y]):
                afficherTuile(x,y,13)
            else:
                afficherTuile(x,y,12)