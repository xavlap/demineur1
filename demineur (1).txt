#9 novembre 2020
#Par Abderrezak AGSOUS (20189331) et Xavier LAPALME (20187052)

import tuiles

#Pour chaque pixel dans chaque ligne on change le pixel
def afficherImage (x,y, colormap, image):
    for i in range(0,len(image)):    
        for j in range(0,len(image[i])):
            setPixel(x+j,y+i,colormap[image[i][j]])

#Puisque les tuiles sont 16x16, la coordonnée de pixel
#correspond a 16 fois la coordonnée de la tuile
def afficherTuile (x,y, tuile):
    afficherImage(x*16,y*16, tuiles.colormap,tuiles.images[tuile])

#Attendre que l'utilisateur clique a un endroit
def attendreClic():
    while True:
        #Seulement si aucun bouton de la souris n'est utilisé,
        #on peut attendre pour un clique
        if getMouseButton() == 0:
            sleep(0.01)
            clic = getMouseButton()
            X=getMouseX()
            Y=getMouseY()
            CTRL = getMouseCtrl()
            
            #On divise entièrement le x et le y car les images des tuiles
            #sont 16x16. Comme dans afficherTuiles()
            if clic == 1 and CTRL ==False :
                return struct(X=X//16,Y=Y//16,drapeau = False)       
            elif clic == 2 or clic == 1 and CTRL==True:
                return struct(X=X//16,Y=Y//16,drapeau = True)
        

#Retourne un tableau 2D de boolean false
def grilleDeBooleens(largeur, hauteur):
    matrice= [None] * hauteur
    for i in range(hauteur):
        matrice[i] = [False] * largeur
    return matrice

#On place les nbMines dans un tableau de bool qu'on retourne
def placerMines(largeur, hauteur, nbMines, x, y): 
    mines = grilleDeBooleens(largeur, hauteur)#on créer notre grille
    nbMinesPlacer = 0 #nombre de mines placer
    
    #Si on a pas placé toutes les mines, on repasse dans le tableau
    while nbMinesPlacer != nbMines:
        for m in range(nbMines- nbMinesPlacer):
            for i in range(len(mines)):
                for j in range(len(mines[i])):
                    
                    #si une valeur random est plus petite que
                    #1/(largeur*hauteur)on veut placer la mine
                    #1/(largeur*hauteur) car on veux que les chances de 
                    #placer la mine soient plus petites si le tableau est 
                    #pour placer les mines partout dans le tableau plus grand
                    
                    if (random() <= 1/(largeur*hauteur) and
                        mines[i][j] != True and nbMinesPlacer != nbMines):
                        if i == x and j == y:
                            continue
                        else:
                            mines[i][j] = True
                            nbMinesPlacer +=1
    return mines  

#Regarde chaque case adjacente à la coordonee (x,y) 
#Qui ne sort pas du tableau de jeu
#S'il y a une mine, on ajoute 1 au cpt(compteur)
def nbMinesVoisines(x, y, mines):
    nbMines = 0
    
    #Assume que postion est au centre
    xStart = x - 1 
    xEnd = x + 1
    yStart = y - 1
    yEnd = y + 1

    #Vérifie si la postion est sur la bordure,
    #si oui, recentrer afin de ne pas dépasser la bordure.
    if x == 0:
        xStart = 0
    if x == len(mines[0]) - 1:
        xEnd = x
    if y == 0:
        yStart = 0
    if y == len(mines) - 1:
        yEnd = y

    #Vérifie pour mines vosines
    for posY in range(yStart, yEnd + 1):
        for posX in range(xStart, xEnd + 1):
            if mines[posX][posY]:
                nbMines += 1
    return nbMines

#Affiche les mines et les mauvais drapeaux
def afficherMines(mines,drapeaux):
    for i in range(len(mines)):
        for j in range(len(mines[i])):
            if drapeaux[i][j] and not mines[i][j]:#Un drapeau pas sur une mine
                afficherTuile(i,j,11)
            elif mines[i][j]:#Une mine
                afficherTuile(i,j,9)

def demineur(largeur, hauteur, nbMines):
    setScreenMode(hauteur*16,largeur*16)
    
    gameOver = False
    drapeaux = grilleDeBooleens(largeur, hauteur)
    
    #Affiche les tuiles vides
    for i in range(hauteur):
        for j in range(largeur):
            afficherTuile(i, j, 12)
            
    #On place les mines après le premier clique pour être sur de ne pas cliquer 
    #sur une bombe au premier clique
    premierClic = attendreClic()
    mines = placerMines(largeur, hauteur, nbMines, premierClic.X,premierClic.Y)
    afficherTuile(premierClic.X,premierClic.Y,
                  nbMinesVoisines(premierClic.X, premierClic.Y, mines))
    
    while not gameOver:
        clic = attendreClic()
        x = clic.X
        y = clic.Y
        clicDrapeau = clic.drapeau
        
        if not clicDrapeau:
            if not drapeaux[x][y]:#S'il y a un drapeau on fait rien
                if mines[x][y]: #Si clique sur mine
                    afficherMines(mines,drapeaux)
                    afficherTuile(x,y,10)#Affiche la mine où on clique en rouge
                    alert('Better luck next time!')
                    gameOver = True #Stop le jeu
                    
                else: #Affichage selon nombre de mines voisines
                    afficherTuile(x,y,nbMinesVoisines(x, y, mines))
                    
        
        #Si on veux mettre ou enlever un drapeau
        else: 
            drapeaux[x][y] = not drapeaux[x][y]#On change le boolean
            
            #On affiche la case qui correspond a ce qu'on veut
            if(drapeaux[x][y]):
                afficherTuile(x,y,13)#Mettre un drapeau
            else:
                afficherTuile(x,y,12)#Enlever un drapeau
                
        #Si on a mit un drapeau sur toutes les bombes
        #et seulement sur les bombes, on gagne la partie et on l'arrête
        if mines == drapeaux:
            alert('Congratulations!')
            gameOver=True
                
def testDemineur():
    
 
    
    # 5 tests de afficherTuile
    setScreenMode(16,16)
    afficherTuile(0,0,12)
    assert exportScreen() == '#'\
    'fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#ccc\n'\
    '#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#fff#ccc#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#fff#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#888#888\n'\
    '#fff#ccc#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#ccc#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888'
    
    setScreenMode(16,16)
    afficherTuile(0,0,0)
    assert exportScreen() == '#'\
    '888#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc'
    
    setScreenMode(16,16)
    afficherTuile(0,0,3)
    assert exportScreen() == '#'\
    '888#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#f00#f00#f00#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#f00#f00#f00#f00#f00#f00#f00#f00#f00#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc'
    
    setScreenMode(16,16)
    afficherTuile(0,0,10)
    assert exportScreen() == '#'\
    '888#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#000#f00#f00#f00#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#000#f00#f00#f00#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#000#f00#000#000#000#000#000#f00#000#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#000#000#000#000#000#000#000#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#000#000#fff#fff#000#000#000#000#000#f00#f00#f00\n'\
    '#888#f00#f00#f00#000#000#fff#fff#000#000#000#000#000#f00#f00#f00\n'\
    '#888#f00#000#000#000#000#000#000#000#000#000#000#000#000#000#f00\n'\
    '#888#f00#f00#f00#000#000#000#000#000#000#000#000#000#f00#f00#f00\n'\
    '#888#f00#f00#f00#000#000#000#000#000#000#000#000#000#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#000#000#000#000#000#000#000#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#000#f00#000#000#000#000#000#f00#000#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#000#f00#f00#f00#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#000#f00#f00#f00#f00#f00#f00#f00\n'\
    '#888#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00#f00'
    
    setScreenMode(16,16)
    afficherTuile(0,0,6)
    assert exportScreen() == '#'\
    '888#888#888#888#888#888#888#888#888#888#888#888#888#888#888#888\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#088#088#088#088#088#088#088#088#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#088#088#088#088#088#088#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#088#088#088#088#088#088#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#088#088#088#088#088#088#088#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#ccc#ccc#ccc#ccc#088#088#088#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#ccc#ccc#ccc#ccc#088#088#088#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#088#088#088#088#088#088#088#088#088#088#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#088#088#088#088#088#088#088#088#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc\n'\
    '#888#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc#ccc'
    
    # 5 tests de afficherImage
    
    
    setScreenMode(4,4)
    image4x4 = [[0,2,3,5],
                [1,4,3,6],
                [1,5,8,0],
                [2,3,9,1]]

    afficherImage(0,0,tuiles.colormap,image4x4)
    assert exportScreen() == '#ccc#080#f00#800\n'\
    '#00f#008#f00#088\n'\
    '#00f#800#888#ccc\n'\
    '#080#f00#fff#00f'
    
    setScreenMode(4,4)
    image3x3 = [[0,2,3],
                [1,4,3],
                [1,5,8]]
    afficherImage(1,1,tuiles.colormap,image3x3)
    assert exportScreen() == '#000#000#000#000\n'\
    '#000#ccc#080#f00\n'\
    '#000#00f#008#f00\n'\
    '#000#00f#800#888'
    
    setScreenMode(4,4)
    image1x1=[[1]]
    afficherImage(getScreenWidth()-1,getScreenHeight()-1,
                  tuiles.colormap,image1x1)
    assert exportScreen() == '#000#000#000#000\n'\
    '#000#000#000#000\n'\
    '#000#000#000#000\n'\
    '#000#000#000#00f'
    
    setScreenMode(4,4)
    afficherImage(0,0,tuiles.colormap,image1x1)
    assert exportScreen() == '#00f#000#000#000\n'\
    '#000#000#000#000\n'\
    '#000#000#000#000\n'\
    '#000#000#000#000'
    
    setScreenMode(4,4)
    image2x1=[[1],
             [1]]
    afficherImage(3,2,tuiles.colormap,image2x1)
    assert exportScreen() == '#000#000#000#000\n'\
    '#000#000#000#000\n'\
    '#000#000#000#00f\n'\
    '#000#000#000#00f'
                
    # 5 tests pour grille boolean
           
    assert grilleDeBooleens(1,1) ==[[False]]
    assert grilleDeBooleens(0,0) == []
    assert grilleDeBooleens(-1,-1)== []
    assert grilleDeBooleens(3,3)==[[False, False, False], 
                                   [False, False, False],
                                   [False, False, False]]
    
    assert grilleDeBooleens(2,3)==[[False, False], [False, False],
                                   [False, False]]
    
    # 5 tests pour placerMines
    
    assert placerMines(4,4,0,2,2) == [[False, False, False, False],
                                      [False, False, False, False],
                                      [False, False, False, False],
                                      [False, False, False, False]]
                                      
    
    assert placerMines(0,0,0,0,0) ==[]
    
    assert placerMines(3,3,0,-1,-1) == [[False, False, False],
                                        [False, False, False],
                                        [False, False, False]]
    
    assert placerMines(3,3,0,0,0) == [[False, False, False],
                                      [False, False, False],
                                      [False, False, False]]
    
    assert placerMines(4,4,15,0,0) ==[[False, True, True, True],
                                     [True, True, True, True],
                                     [True, True, True, True],
                                     [True, True, True, True]]
    
    
    # 5 tests pour minevoisine
    
    assert nbMinesVoisines(0,0,[[False,False],
                                [False,True]]) == 1
    
    assert nbMinesVoisines(1, 1,[[False,False],
                                 [False,True]]) == 1
    
    assert nbMinesVoisines(2, 2,[[False,False,False],
                                 [False,True,False],
                                 [False,False,False]]) == 1
    
    assert nbMinesVoisines(2, 2,[[False,False,False],
                                 [False,True,False],
                                 [False,True,False]]) == 2
    
    assert nbMinesVoisines(3, 3,[[False,False,False,False],
                                 [False,False,False,False],
                                 [False,False,False,False],
                                 [False,False,False,False]]) == 0
    
testDemineur()